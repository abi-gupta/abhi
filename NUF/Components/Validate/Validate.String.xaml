<Activity mc:Ignorable="sap sap2010 sads" x:Class="CheckInputString"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="The input value to be checked" Name="io_String" Type="InOutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property sap2010:Annotation.AnnotationText="Determines whether the argument is allowed to be empty, default is False (optional)" Name="in_AllowEmpty" Type="InArgument(x:Boolean)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>CheckInputString_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Check if input argument is valid&#xA;&#xA;Input:&#xA;- io_String, the input value to be checked&#xA;- in_AllowEmpty, determines whether the argument is allowed to be empty, default is False (optional)&#xA;&#xA;Output:&#xA;- io_String, the checked and possibly modified input value&#xA;&#xA;Result:&#xA;Input argument has been checked successfully or exception has been thrown&#xA;If the input argument is allowed to be empty and is uninitialized, the string is returned as empty string &quot;&quot;" DisplayName="CheckInputString" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <If Condition="[io_String isNot Nothing]" DisplayName="Check if input is uninitialized" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <If Condition="[String.IsNullOrWhiteSpace(io_String) And Not in_AllowEmpty]" DisplayName="Check if argument is empty and allowed to be empty" sap2010:WorkflowViewState.IdRef="If_3">
          <If.Then>
            <Throw DisplayName="ArgumentException" Exception="[New ArgumentException(&quot;CheckInputString - String is not allowed to be empty&quot;)]" sap2010:WorkflowViewState.IdRef="Throw_2" />
          </If.Then>
        </If>
      </If.Then>
      <If.Else>
        <If Condition="[in_AllowEmpty]" DisplayName="Check if string is allowed to be empty" sap2010:WorkflowViewState.IdRef="If_2">
          <If.Then>
            <Assign DisplayName="Assign return empty string" sap2010:WorkflowViewState.IdRef="Assign_1">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[io_String]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </Assign.Value>
            </Assign>
          </If.Then>
          <If.Else>
            <Throw DisplayName="ArgumentException" Exception="[New ArgumentException(&quot;CheckInputString - String is not initialized&quot;)]" sap2010:WorkflowViewState.IdRef="Throw_1" />
          </If.Else>
        </If>
      </If.Else>
    </If>
    <sads:DebugSymbol.Symbol>d0xDOlxVc2Vyc1x0b21la1xEb2N1bWVudHNcVWlQYXRoXE5VRlxDb21wb25lbnRzXFZhbGlkYXRlXFZhbGlkYXRlLlN0cmluZy54YW1sDkkDZw4CAQFKBWUKAgECShNKLgIBA0wJUA4CAQ5TCWMOAgEFTBdMVQIBD04NTsYBAgESUxdTKAIBBlUNXhYCAQphDWG+AQIBCE4+TpkBAgETWxNbQgIBDVc5V0QCAQthPmGRAQIBCQ==</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Throw_2" sap:VirtualizedContainerService.HintSize="200,22.4" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="464,209.6" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Throw_1" sap:VirtualizedContainerService.HintSize="200,22.4" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="468,209.6" />
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="956.8,359.2" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="979.2,688">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="CheckInputString_1" sap:VirtualizedContainerService.HintSize="1019.2,768" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>